module procsn32(
input clock,
input [31:0] inst,
output [31:0] result
);
wire [4:0] rs1_num, rs2_num, rd_num;
reg [4:0] rd_num_r, rd_num_rr;
wire [3:0] ctrl;
wire [31:0] rs1, rs2;
wire [31:0] inst_r,outP;
//Instruction Decode Stage
inst_dec ID (inst, rs1_num, rs2_num, rd_num, inst_r, clock);
//Control Signal Stage
control CTRL (inst_r, ctrl, clock);
always@(posedge clock) begin
rd_num_r <= rd_num;
rd_num_rr <= rd_num_r;
end
//ALU Stage
ALU ALU (rs1, rs2, ctrl, outP, clock);

//Register Bank module
regBank regB(clock, rs1_num, rs2_num, rd_num_rr, outP, rs1, rs2);
assign result = outP;
endmodule
module regBank(input clock, input [4:0] rs1_num, rs2_num, dataW_num,
input [31:0] dataW, output reg [31:0] data1, data2);
reg [31:0] regBank [0:31]; //register_bank
always@(posedge clock) begin
data1 <= regBank[rs1_num];
data2 <= regBank[rs2_num];
regBank[dataW_num] <= dataW;
end
endmodule
module inst_dec(input [31:0] inst,
output [4:0] rs1_num, rs2_num, rd_num,
output reg [31:0] inst_r, input clock);
always@(posedge clock) inst_r = inst;
assign rs1_num = inst_r[19:15]; //rs1
assign rs2_num = inst_r[24:20]; //rs2
assign rd_num = inst_r[11:7]; //rd
endmodule
module control(input [31:0] inst, output reg [3:0] ctrl, input clock);
parameter ADD = 10’b0000001, SUB = 10’b0010001, SLL = 10’b0000011,
SRL = 10’b0010011, SRA = 10’b0100011, SLT = 10’b0000111,
SLTU= 10’b0010111, XOR = 10’b0001111, OR = 10’b0011111,
AND = 10’b0101111; //func_opcode
always@(posedge clock) begin
case({inst[14:12],inst[3:0]}) //func_opcode
ADD : ctrl = 4’h1;
SUB : ctrl = 4’h2;
SLL : ctrl = 4’h3;

SRL : ctrl = 4’h4;
SRA : ctrl = 4’h5;
SLT : ctrl = 4’h6;
SLTU: ctrl = 4’h7;
XOR : ctrl = 4’h8;
OR : ctrl = 4’h9;
AND : ctrl = 4’ha;
default : ctrl = 4’h0;
endcase
end
endmodule
module ALU(input [31:0] rs1, input [31:0] rs2, input [3:0] ctrl,
output reg [31:0] outP, input clock);
always@(posedge clock) begin//EX
case(ctrl) //func_opcode
4’h1 : outP = rs1 + rs2 ;
4’h2 : outP = rs1 - rs2 ;
4’h3 : outP = rs1 << rs2[4:0] ;
4’h4 : outP = rs1 >> rs2[4:0] ;
4’h5 : outP = $signed(rs1) >>> rs2[4:0] ;
4’h6 : outP = ($signed(rs1) < $signed(rs2))
? 32’h00000001 : 32’h00000000 ;
4’h7 : outP = (rs1 < rs2)
? 32’h00000001 : 32’h00000000 ;
4’h8 : outP = rs1 ^ rs2 ;
4’h9 : outP = rs1 | rs2 ;
4’ha : outP = rs1 & rs2 ;
default : outP = 32’hxxxxxxxx ;
endcase
end
endmodule

3.2 Test bench ;
module testbench(
);
reg clock;
reg [31:0] inst;
always #10 clock = ~clock;
procsn32 DUT(clock, inst);
initial begin
clock <= 1;
DUT.regB.regBank[0] = 0;
DUT.regB.regBank[1] = 32’h0000000f;
DUT.regB.regBank[2] = 32’h0000000c;
DUT.regB.regBank[3] = 32’hff0000ff;
DUT.regB.regBank[4] = 32’h00000004;
DUT.regB.regBank[5] = 32’h70000000;
DUT.regB.regBank[6] = 32’hf0000000;
#20 inst = {7’h00,5’h02,5’h01,3’h0,5’h0a,7’h01}; //ADD
#20 inst = {7’h00,5’h02,5’h01,3’h1,5’h0b,7’h01}; //SUB
#20 inst = {7’h00,5’h04,5’h03,3’h0,5’h0c,7’h03}; //SLL
#20 inst = {7’h00,5’h04,5’h03,3’h1,5’h0d,7’h03}; //SRL
#20 inst = {7’h00,5’h04,5’h03,3’h2,5’h0e,7’h03}; //SRA
#20 inst = {7’h00,5’h06,5’h05,3’h0,5’h0f,7’h07}; //SLT
#20 inst = {7’h00,5’h06,5’h05,3’h1,5’h10,7’h07}; //SLTU
#20 inst = {7’h00,5’h02,5’h01,3’h0,5’h11,7’h0f}; //XOR
#20 inst = {7’h00,5’h02,5’h01,3’h1,5’h12,7’h0f}; //OR
#20 inst = {7’h00,5’h02,5’h01,3’h2,5’h13,7’h0f}; //AND
end
endmodule
